diff -urN stardict-3.0.2/src/docklet.cpp stardict-3.0.2.new/src/docklet.cpp
--- stardict-3.0.2/src/docklet.cpp	2010-10-05 16:28:16.000000000 +0800
+++ stardict-3.0.2.new/src/docklet.cpp	2011-05-16 19:16:05.682538987 +0800
--- stardict-3.0.2/src/docklet.cpp	2010-10-05 16:28:16.000000000 +0800
+++ stardict-3.0.2.new/src/docklet.cpp	2011-05-16 21:15:15.959833281 +0800
@@ -12,7 +12,6 @@
 		 const AppSkin& skin) : TrayBase(mainwin, is_scan_on)
 {
 	menu_ = NULL;
-	image_ = NULL;
 	embedded_ = false;
 
 	normal_icon_ = get_impl(skin.docklet_normal_icon);
@@ -24,28 +23,26 @@
 
 void DockLet::create_docklet()
 {
-	docklet_ = egg_tray_icon_new("StarDict");
-	gtk_widget_add_events (GTK_WIDGET(docklet_), GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK);
+	docklet_ = gtk_status_icon_new();
 	if (is_hide_state()) {
-		gtk_widget_set_tooltip_text(GTK_WIDGET(docklet_), _("StarDict"));
-		image_ = gtk_image_new_from_pixbuf(normal_icon_);
-	} else if (is_scan_on()) {
-		gtk_widget_set_tooltip_text(GTK_WIDGET(docklet_), _("StarDict - Scanning"));
-		image_ = gtk_image_new_from_pixbuf(scan_icon_);
-	} else {
-		gtk_widget_set_tooltip_text(GTK_WIDGET(docklet_), _("StarDict - Stopped"));
-		image_ = gtk_image_new_from_pixbuf(stop_icon_);
+        gtk_status_icon_set_tooltip(docklet_, _("StarDict"));
+        gtk_status_icon_set_from_pixbuf(docklet_, normal_icon_);
+    } else if (is_scan_on()) {
+        gtk_status_icon_set_tooltip(docklet_, _("StarDict - Scanning"));
+        gtk_status_icon_set_from_pixbuf(docklet_, scan_icon_);
+    } else {
+        gtk_status_icon_set_tooltip(docklet_, _("StarDict - Stopped"));
+        gtk_status_icon_set_from_pixbuf(docklet_, stop_icon_);
 	}
 
-	g_signal_connect(G_OBJECT(docklet_), "embedded",
-			 G_CALLBACK(on_embedded), this);
-	g_signal_connect(G_OBJECT(docklet_), "destroy",
-			 G_CALLBACK(on_destroyed), this);
 	g_signal_connect(G_OBJECT(docklet_), "button-press-event",
-			 G_CALLBACK(on_btn_press), this);
+			 G_CALLBACK (on_btn_press), this);
+    g_signal_connect(G_OBJECT( docklet_ ), "notify::embedded",
+             G_CALLBACK (on_notified), this);
+    g_signal_connect(G_OBJECT( docklet_ ), "notify::destory",
+             G_CALLBACK (on_notified), this);
+    gtk_status_icon_set_visible (docklet_, true);
 
-	gtk_container_add(GTK_CONTAINER(docklet_), image_);
-	gtk_widget_show_all(GTK_WIDGET(docklet_));
 
 	/* ref the docklet_ before we bandy it about the place */
 	g_object_ref(G_OBJECT(docklet_));
@@ -57,25 +54,13 @@
 		;
 
 	g_signal_handlers_disconnect_by_func(G_OBJECT(docklet_),
-					     gpointer(on_destroyed), this);
-	gtk_widget_destroy(GTK_WIDGET(docklet_));
+            gpointer(on_notified), this);
+
 	g_object_unref(G_OBJECT(docklet_));	
 	if (menu_)
 		gtk_widget_destroy(get_impl(menu_));
 }
 
-void DockLet::on_destroyed(GtkWidget *widget, DockLet *oDockLet)
-{
-	oDockLet->embedded_ = false;
-	oDockLet->image_ = NULL;
-
-	while (g_source_remove_by_user_data(&oDockLet->docklet_))
-		;
-	g_object_unref(G_OBJECT(oDockLet->docklet_));
-	//when user add Nofification area applet again,it will show icon again.
-	g_idle_add(on_docklet_create, oDockLet);
-}
-
 void DockLet::on_menu_scan(GtkCheckMenuItem *checkmenuitem, gpointer user_data)
 {
 	static_cast<DockLet *>(user_data)->on_change_scan_.emit(
@@ -87,7 +72,7 @@
 	static_cast<DockLet *>(user_data)->on_quit_.emit();
 }
 
-void DockLet::popup_menu(GdkEventButton *event)
+void DockLet::popup_menu(guint button, guint time)
 {
 	if (!menu_) {
 		menu_.reset(gtk_menu_new());
@@ -111,13 +96,12 @@
 		gtk_menu_shell_append(GTK_MENU_SHELL(get_impl(menu_)),
 				      menuitem);
 
-		gtk_widget_show_all(get_impl(menu_));
-	}
-	gtk_check_menu_item_set_active(GTK_CHECK_MENU_ITEM(scan_menuitem_),
+        gtk_widget_show_all(get_impl(menu_));
+    }
+    gtk_check_menu_item_set_active(GTK_CHECK_MENU_ITEM(scan_menuitem_),
 				       is_scan_on());
 
-	gtk_menu_popup(GTK_MENU(get_impl(menu_)), NULL, NULL, NULL, NULL,
-		       event->button, event->time);
+    gtk_menu_popup(GTK_MENU(get_impl(menu_)), NULL, NULL, gtk_status_icon_position_menu, docklet_, button, time);
 }
 
 gboolean DockLet::on_docklet_create(gpointer data)
@@ -127,14 +111,27 @@
 	return FALSE; /* for when we're called by the glib idle handler */
 }
 
-void DockLet::on_embedded(GtkWidget *widget, gpointer data)
+void DockLet::on_notified(GObject *gobject, GParamSpec *arg1, gpointer data)
 {
-	static_cast<DockLet *>(data)->embedded_ = true;
+    DockLet *dock = static_cast<DockLet *>(data); 
+    if ( g_str_equal(arg1->name,"embedded") )
+    {  
+        dock->embedded_=true;
+    }
+    if ( g_str_equal(arg1->name,"destroy") )
+    { 
+        dock->embedded_ = false;
+        while (g_source_remove_by_user_data(&dock->docklet_)) 
+            ; 
+        g_object_unref(G_OBJECT(dock->docklet_));
+        //when user add Nofification area applet again,it will show icon again.
+        g_idle_add(on_docklet_create, dock);
+     }
 }
 
 
-gboolean DockLet::on_btn_press(GtkWidget *button, GdkEventButton *event,
-			       DockLet *dock)
+
+gboolean DockLet::on_btn_press(GtkStatusIcon *status_icon, GdkEventButton *event, DockLet *dock)
 {
 	if (event->type != GDK_BUTTON_PRESS)
 		return FALSE;
@@ -159,7 +156,7 @@
 		dock->on_middle_btn_click_.emit();
 		return TRUE;
 	case 3:
-		dock->popup_menu(event);
+		dock->popup_menu(event->button, event->time);
 		return TRUE;
 	default:
 		/* nothing */break;
@@ -178,27 +175,29 @@
 
 void DockLet::scan_on()
 {
-        gtk_widget_set_tooltip_text(GTK_WIDGET(docklet_), _("StarDict - Scanning"));
-        gtk_image_set_from_pixbuf(GTK_IMAGE(image_), scan_icon_);
+    if (!scan_icon_)
+       return;
+    gtk_status_icon_set_tooltip (docklet_, _("StarDict - Scanning") );
+    gtk_status_icon_set_from_pixbuf(docklet_, scan_icon_);
 }
 
 void DockLet::scan_off()
 {
-        gtk_widget_set_tooltip_text(GTK_WIDGET(docklet_), _("StarDict - Stopped"));
-        gtk_image_set_from_pixbuf(GTK_IMAGE(image_), stop_icon_);
+    if(!stop_icon_)
+       return;
+    gtk_status_icon_set_tooltip (docklet_, _("StarDict - Stopped") );
+    gtk_status_icon_set_from_pixbuf(docklet_, stop_icon_);
 }
 
 void DockLet::show_normal_icon()
 {
-        if (!image_)
-                return;
-        gtk_widget_set_tooltip_text(GTK_WIDGET(docklet_), _("StarDict"));
-        gtk_image_set_from_pixbuf(GTK_IMAGE(image_), normal_icon_);
+    if (!normal_icon_)
+        return;
+    gtk_status_icon_set_tooltip (docklet_, _("StarDict") );
+    gtk_status_icon_set_from_pixbuf(docklet_, normal_icon_);
 }
 
 void DockLet::set_scan_mode(bool is_on)
 {
-        if (!image_)
-                return;
         TrayBase::set_scan_mode(is_on);
 }
diff -urN stardict-3.0.2/src/docklet.h stardict-3.0.2.new/src/docklet.h
--- stardict-3.0.2/src/docklet.h	2010-10-05 16:28:15.000000000 +0800
+++ stardict-3.0.2.new/src/docklet.h	2011-05-16 19:15:49.735872722 +0800
@@ -3,7 +3,6 @@
 
 #include <gtk/gtk.h>
 #include "tray.hpp"
-#include "eggtrayicon.h"
 #include "lib/utils.h"
 
 class AppSkin;//forward declaration
@@ -15,22 +14,20 @@
 	void minimize_to_tray();
 	void set_scan_mode(bool);
 private:
-	EggTrayIcon *docklet_;
-	GtkWidget *image_; //icon image.
+    GtkStatusIcon *docklet_;
 	typedef  ResourceWrapper<GtkWidget, GtkWidget, void, gtk_widget_destroy> GMenu;
         GMenu menu_;
 	GtkWidget *scan_menuitem_;
 	bool embedded_;
 	GdkPixbuf *normal_icon_, *stop_icon_, *scan_icon_;
 
-	static void on_embedded(GtkWidget *widget, gpointer data);
-	static void on_destroyed(GtkWidget *widget, DockLet *oDockLet);
-	static gboolean on_btn_press(GtkWidget *, GdkEventButton *, DockLet *);
+    static void on_notified (GObject *gobject, GParamSpec *arg1, gpointer data); 
+    static gboolean on_btn_press(GtkStatusIcon  *, GdkEventButton *, DockLet *); 
 	static void on_menu_scan(GtkCheckMenuItem *, gpointer);
 	static void on_menu_quit(GtkMenuItem *, gpointer);	
 	static gboolean on_docklet_create(gpointer data);
 
-	void popup_menu(GdkEventButton *event);
+	void popup_menu(guint button, guint time);
 	void create_docklet();
 	void scan_on();
 	void scan_off();
diff -urN stardict-3.0.2/src/eggtrayicon.c stardict-3.0.2.new/src/eggtrayicon.c
--- stardict-3.0.2/src/eggtrayicon.c	2010-10-05 16:28:16.000000000 +0800
+++ stardict-3.0.2.new/src/eggtrayicon.c	1970-01-01 08:00:00.000000000 +0800
@@ -1,561 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*- */
-/* eggtrayicon.c
- * Copyright (C) 2002 Anders Carlsson <andersca@gnu.org>
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2 of the License, or (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this library; if not, write to the
- * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
- * Boston, MA 02111-1307, USA.
- */
-
-#include <config.h>
-#include <string.h>
-#include <libintl.h>
-
-#include "eggtrayicon.h"
-
-#include <gdkconfig.h>
-#if defined (GDK_WINDOWING_X11)
-#include <gdk/gdkx.h>
-#include <X11/Xatom.h>
-#elif defined (GDK_WINDOWING_WIN32)
-#include <gdk/gdkwin32.h>
-#endif
-
-#ifndef EGG_COMPILATION
-#ifndef _
-#define _(x) dgettext (GETTEXT_PACKAGE, x)
-#define N_(x) x
-#endif
-#else
-#define _(x) x
-#define N_(x) x
-#endif
-
-#define SYSTEM_TRAY_REQUEST_DOCK    0
-#define SYSTEM_TRAY_BEGIN_MESSAGE   1
-#define SYSTEM_TRAY_CANCEL_MESSAGE  2
-
-#define SYSTEM_TRAY_ORIENTATION_HORZ 0
-#define SYSTEM_TRAY_ORIENTATION_VERT 1
-
-enum {
-  PROP_0,
-  PROP_ORIENTATION
-};
-         
-static GtkPlugClass *parent_class = NULL;
-
-static void egg_tray_icon_init (EggTrayIcon *icon);
-static void egg_tray_icon_class_init (EggTrayIconClass *klass);
-
-static void egg_tray_icon_get_property (GObject    *object,
-					guint       prop_id,
-					GValue     *value,
-					GParamSpec *pspec);
-
-static void egg_tray_icon_realize   (GtkWidget *widget);
-static void egg_tray_icon_unrealize (GtkWidget *widget);
-static void egg_tray_icon_add (GtkContainer *container,
-                               GtkWidget *widget);
-
-#ifdef GDK_WINDOWING_X11
-static void egg_tray_icon_update_manager_window    (EggTrayIcon *icon,
-						    gboolean     dock_if_realized);
-static void egg_tray_icon_manager_window_destroyed (EggTrayIcon *icon);
-#endif
-
-GType
-egg_tray_icon_get_type (void)
-{
-  static GType our_type = 0;
-
-  if (our_type == 0)
-    {
-      static const GTypeInfo our_info =
-      {
-	sizeof (EggTrayIconClass),
-	(GBaseInitFunc) NULL,
-	(GBaseFinalizeFunc) NULL,
-	(GClassInitFunc) egg_tray_icon_class_init,
-	NULL, /* class_finalize */
-	NULL, /* class_data */
-	sizeof (EggTrayIcon),
-	0,    /* n_preallocs */
-	(GInstanceInitFunc) egg_tray_icon_init
-      };
-
-      our_type = g_type_register_static (GTK_TYPE_PLUG, "EggTrayIcon", &our_info, 0);
-    }
-
-  return our_type;
-}
-
-static void
-egg_tray_icon_init (EggTrayIcon *icon)
-{
-  icon->stamp = 1;
-  icon->orientation = GTK_ORIENTATION_HORIZONTAL;
-  
-  gtk_widget_add_events (GTK_WIDGET (icon), GDK_PROPERTY_CHANGE_MASK);
-}
-
-static void
-egg_tray_icon_class_init (EggTrayIconClass *klass)
-{
-  GObjectClass *gobject_class = (GObjectClass *)klass;
-  GtkWidgetClass *widget_class = (GtkWidgetClass *)klass;
-  GtkContainerClass *container_class = (GtkContainerClass *)klass;
-
-  parent_class = g_type_class_peek_parent (klass);
-
-  gobject_class->get_property = egg_tray_icon_get_property;
-
-  widget_class->realize   = egg_tray_icon_realize;
-  widget_class->unrealize = egg_tray_icon_unrealize;
-
-  container_class->add = egg_tray_icon_add;
-
-  g_object_class_install_property (gobject_class,
-				   PROP_ORIENTATION,
-				   g_param_spec_enum ("orientation",
-						      _("Orientation"),
-						      _("The orientation of the tray."),
-						      GTK_TYPE_ORIENTATION,
-						      GTK_ORIENTATION_HORIZONTAL,
-						      G_PARAM_READABLE));
-
-#if defined (GDK_WINDOWING_X11)
-  /* Nothing */
-#elif defined (GDK_WINDOWING_WIN32)
-  g_warning ("Port eggtrayicon to Win32");
-#else
-  g_warning ("Port eggtrayicon to this GTK+ backend");
-#endif
-}
-
-static void
-egg_tray_icon_get_property (GObject    *object,
-			    guint       prop_id,
-			    GValue     *value,
-			    GParamSpec *pspec)
-{
-  EggTrayIcon *icon = EGG_TRAY_ICON (object);
-
-  switch (prop_id)
-    {
-    case PROP_ORIENTATION:
-      g_value_set_enum (value, icon->orientation);
-      break;
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
-    }
-}
-
-#ifdef GDK_WINDOWING_X11
-static gboolean
-transparent_expose_event (GtkWidget *widget, GdkEventExpose *event, gpointer user_data)
-{
-	gdk_window_clear_area (widget->window, event->area.x, event->area.y,
-	                      event->area.width, event->area.height);
-	return FALSE;
-}
-
-static void
-make_transparent_again (GtkWidget *widget, GtkStyle *previous_style,
-                       gpointer user_data)
-{
-	gdk_window_set_back_pixmap(widget->window, NULL, TRUE);
-}
-
-static void
-make_transparent (GtkWidget *widget, gpointer user_data)
-{
-	if (GTK_WIDGET_NO_WINDOW (widget) || GTK_WIDGET_APP_PAINTABLE (widget))
-		return;
-
-	gtk_widget_set_app_paintable (widget, TRUE);
-	gtk_widget_set_double_buffered (widget, FALSE);
-	gdk_window_set_back_pixmap (widget->window, NULL, TRUE);
-	g_signal_connect (widget, "expose_event",
-	                 G_CALLBACK (transparent_expose_event), NULL);
-	g_signal_connect_after (widget, "style_set",
-	                       G_CALLBACK (make_transparent_again), NULL);
-}
-
-static void
-egg_tray_icon_get_orientation_property (EggTrayIcon *icon)
-{
-  Display *xdisplay;
-  Atom type;
-  int format;
-  union {
-	gulong *prop;
-	guchar *prop_ch;
-  } prop = { NULL };
-  gulong nitems;
-  gulong bytes_after;
-  int error, result;
-
-  g_assert (icon->manager_window != None);
-  
-  xdisplay = GDK_DISPLAY_XDISPLAY (gtk_widget_get_display (GTK_WIDGET (icon)));
-
-  gdk_error_trap_push ();
-  type = None;
-  result = XGetWindowProperty (xdisplay,
-			       icon->manager_window,
-			       icon->orientation_atom,
-			       0, G_MAXLONG, FALSE,
-			       XA_CARDINAL,
-			       &type, &format, &nitems,
-			       &bytes_after, &(prop.prop_ch));
-  error = gdk_error_trap_pop ();
-
-  if (error || result != Success)
-    return;
-
-  if (type == XA_CARDINAL)
-    {
-      GtkOrientation orientation;
-
-      orientation = (prop.prop [0] == SYSTEM_TRAY_ORIENTATION_HORZ) ?
-					GTK_ORIENTATION_HORIZONTAL :
-					GTK_ORIENTATION_VERTICAL;
-
-      if (icon->orientation != orientation)
-	{
-	  icon->orientation = orientation;
-
-	  g_object_notify (G_OBJECT (icon), "orientation");
-	}
-    }
-
-  if (prop.prop)
-    XFree (prop.prop);
-}
-
-static GdkFilterReturn
-egg_tray_icon_manager_filter (GdkXEvent *xevent, GdkEvent *event, gpointer user_data)
-{
-  EggTrayIcon *icon = user_data;
-  XEvent *xev = (XEvent *)xevent;
-
-  if (xev->xany.type == ClientMessage &&
-      xev->xclient.message_type == icon->manager_atom &&
-      xev->xclient.data.l[1] == icon->selection_atom)
-    {
-      egg_tray_icon_update_manager_window (icon, TRUE);
-    }
-  else if (xev->xany.window == icon->manager_window)
-    {
-      if (xev->xany.type == PropertyNotify &&
-	  xev->xproperty.atom == icon->orientation_atom)
-	{
-	  egg_tray_icon_get_orientation_property (icon);
-	}
-      if (xev->xany.type == DestroyNotify)
-	{
-	  egg_tray_icon_manager_window_destroyed (icon);
-	}
-    }
-  return GDK_FILTER_CONTINUE;
-}
-#else
-static void
-make_transparent (GtkWidget *widget, gpointer user_data)
-{
-}
-#endif  
-
-static void
-egg_tray_icon_add (GtkContainer *container, GtkWidget *widget)
-{
-	g_signal_connect (widget, "realize",
-	                 G_CALLBACK (make_transparent), NULL);
-	GTK_CONTAINER_CLASS (parent_class)->add (container, widget);
-}
-
-static void
-egg_tray_icon_unrealize (GtkWidget *widget)
-{
-#ifdef GDK_WINDOWING_X11
-  EggTrayIcon *icon = EGG_TRAY_ICON (widget);
-  GdkWindow *root_window;
-
-  if (icon->manager_window != None)
-    {
-      GdkWindow *gdkwin;
-
-      gdkwin = gdk_window_lookup_for_display (gtk_widget_get_display (widget),
-                                              icon->manager_window);
-
-      gdk_window_remove_filter (gdkwin, egg_tray_icon_manager_filter, icon);
-    }
-
-  root_window = gdk_screen_get_root_window (gtk_widget_get_screen (widget));
-
-  gdk_window_remove_filter (root_window, egg_tray_icon_manager_filter, icon);
-
-  if (GTK_WIDGET_CLASS (parent_class)->unrealize)
-    (* GTK_WIDGET_CLASS (parent_class)->unrealize) (widget);
-#endif
-}
-
-#ifdef GDK_WINDOWING_X11
-
-static void
-egg_tray_icon_send_manager_message (EggTrayIcon *icon,
-				    long         message,
-				    Window       window,
-				    long         data1,
-				    long         data2,
-				    long         data3)
-{
-  XClientMessageEvent ev;
-  Display *display;
-  
-  ev.type = ClientMessage;
-  ev.window = window;
-  ev.message_type = icon->system_tray_opcode_atom;
-  ev.format = 32;
-  ev.data.l[0] = gdk_x11_get_server_time (GTK_WIDGET (icon)->window);
-  ev.data.l[1] = message;
-  ev.data.l[2] = data1;
-  ev.data.l[3] = data2;
-  ev.data.l[4] = data3;
-
-  display = GDK_DISPLAY_XDISPLAY (gtk_widget_get_display (GTK_WIDGET (icon)));
-  
-  gdk_error_trap_push ();
-  XSendEvent (display,
-	      icon->manager_window, False, NoEventMask, (XEvent *)&ev);
-  XSync (display, False);
-  gdk_error_trap_pop ();
-}
-
-static void
-egg_tray_icon_send_dock_request (EggTrayIcon *icon)
-{
-  egg_tray_icon_send_manager_message (icon,
-				      SYSTEM_TRAY_REQUEST_DOCK,
-				      icon->manager_window,
-				      gtk_plug_get_id (GTK_PLUG (icon)),
-				      0, 0);
-}
-
-static void
-egg_tray_icon_update_manager_window (EggTrayIcon *icon,
-				     gboolean     dock_if_realized)
-{
-  Display *xdisplay;
-  
-  if (icon->manager_window != None)
-    return;
-
-  xdisplay = GDK_DISPLAY_XDISPLAY (gtk_widget_get_display (GTK_WIDGET (icon)));
-  
-  XGrabServer (xdisplay);
-  
-  icon->manager_window = XGetSelectionOwner (xdisplay,
-					     icon->selection_atom);
-
-  if (icon->manager_window != None)
-    XSelectInput (xdisplay,
-		  icon->manager_window, StructureNotifyMask|PropertyChangeMask);
-
-  XUngrabServer (xdisplay);
-  XFlush (xdisplay);
-  
-  if (icon->manager_window != None)
-    {
-      GdkWindow *gdkwin;
-
-      gdkwin = gdk_window_lookup_for_display (gtk_widget_get_display (GTK_WIDGET (icon)),
-					      icon->manager_window);
-      
-      gdk_window_add_filter (gdkwin, egg_tray_icon_manager_filter, icon);
-
-      if (dock_if_realized && GTK_WIDGET_REALIZED (icon))
-	egg_tray_icon_send_dock_request (icon);
-
-      egg_tray_icon_get_orientation_property (icon);
-    }
-}
-
-static void
-egg_tray_icon_manager_window_destroyed (EggTrayIcon *icon)
-{
-  GdkWindow *gdkwin;
-  
-  g_return_if_fail (icon->manager_window != None);
-
-  gdkwin = gdk_window_lookup_for_display (gtk_widget_get_display (GTK_WIDGET (icon)),
-					  icon->manager_window);
-      
-  gdk_window_remove_filter (gdkwin, egg_tray_icon_manager_filter, icon);
-
-  icon->manager_window = None;
-
-  egg_tray_icon_update_manager_window (icon, TRUE);
-}
-
-#endif
-
-static void
-egg_tray_icon_realize (GtkWidget *widget)
-{
-#ifdef GDK_WINDOWING_X11
-  EggTrayIcon *icon = EGG_TRAY_ICON (widget);
-  GdkScreen *screen;
-  GdkDisplay *display;
-  Display *xdisplay;
-  char buffer[256];
-  GdkWindow *root_window;
-
-  if (GTK_WIDGET_CLASS (parent_class)->realize)
-    GTK_WIDGET_CLASS (parent_class)->realize (widget);
-
-  make_transparent (widget, NULL);
-
-  screen = gtk_widget_get_screen (widget);
-  display = gdk_screen_get_display (screen);
-  xdisplay = gdk_x11_display_get_xdisplay (display);
-
-  /* Now see if there's a manager window around */
-  g_snprintf (buffer, sizeof (buffer),
-	      "_NET_SYSTEM_TRAY_S%d",
-	      gdk_screen_get_number (screen));
-
-  icon->selection_atom = XInternAtom (xdisplay, buffer, False);
-  
-  icon->manager_atom = XInternAtom (xdisplay, "MANAGER", False);
-  
-  icon->system_tray_opcode_atom = XInternAtom (xdisplay,
-						   "_NET_SYSTEM_TRAY_OPCODE",
-						   False);
-
-  icon->orientation_atom = XInternAtom (xdisplay,
-					"_NET_SYSTEM_TRAY_ORIENTATION",
-					False);
-
-  egg_tray_icon_update_manager_window (icon, FALSE);
-  egg_tray_icon_send_dock_request (icon);
-
-  root_window = gdk_screen_get_root_window (screen);
-  
-  /* Add a root window filter so that we get changes on MANAGER */
-  gdk_window_add_filter (root_window,
-			 egg_tray_icon_manager_filter, icon);
-#endif
-}
-
-EggTrayIcon *
-egg_tray_icon_new_for_screen (GdkScreen *screen, const char *name)
-{
-  g_return_val_if_fail (GDK_IS_SCREEN (screen), NULL);
-
-  return g_object_new (EGG_TYPE_TRAY_ICON, "screen", screen, "title", name, NULL);
-}
-
-EggTrayIcon*
-egg_tray_icon_new (const gchar *name)
-{
-  return g_object_new (EGG_TYPE_TRAY_ICON, "title", name, NULL);
-}
-
-guint
-egg_tray_icon_send_message (EggTrayIcon *icon,
-			    gint         timeout,
-			    const gchar *message,
-			    gint         len)
-{
-  guint stamp;
-  
-  g_return_val_if_fail (EGG_IS_TRAY_ICON (icon), 0);
-  g_return_val_if_fail (timeout >= 0, 0);
-  g_return_val_if_fail (message != NULL, 0);
-		     
-#ifdef GDK_WINDOWING_X11
-  if (icon->manager_window == None)
-    return 0;
-#endif
-
-  if (len < 0)
-    len = strlen (message);
-
-  stamp = icon->stamp++;
-  
-#ifdef GDK_WINDOWING_X11
-  /* Get ready to send the message */
-  egg_tray_icon_send_manager_message (icon, SYSTEM_TRAY_BEGIN_MESSAGE,
-				      (Window)gtk_plug_get_id (GTK_PLUG (icon)),
-				      timeout, len, stamp);
-
-  /* Now to send the actual message */
-  gdk_error_trap_push ();
-  while (len > 0)
-    {
-      XClientMessageEvent ev;
-      Display *xdisplay;
-
-      xdisplay = GDK_DISPLAY_XDISPLAY (gtk_widget_get_display (GTK_WIDGET (icon)));
-      
-      ev.type = ClientMessage;
-      ev.window = (Window)gtk_plug_get_id (GTK_PLUG (icon));
-      ev.format = 8;
-      ev.message_type = XInternAtom (xdisplay,
-				     "_NET_SYSTEM_TRAY_MESSAGE_DATA", False);
-      if (len > 20)
-	{
-	  memcpy (&ev.data, message, 20);
-	  len -= 20;
-	  message += 20;
-	}
-      else
-	{
-	  memcpy (&ev.data, message, len);
-	  len = 0;
-	}
-
-      XSendEvent (xdisplay,
-		  icon->manager_window, False, StructureNotifyMask, (XEvent *)&ev);
-      XSync (xdisplay, False);
-    }
-  gdk_error_trap_pop ();
-#endif
-
-  return stamp;
-}
-
-void
-egg_tray_icon_cancel_message (EggTrayIcon *icon,
-			      guint        id)
-{
-  g_return_if_fail (EGG_IS_TRAY_ICON (icon));
-  g_return_if_fail (id > 0);
-#ifdef GDK_WINDOWING_X11  
-  egg_tray_icon_send_manager_message (icon, SYSTEM_TRAY_CANCEL_MESSAGE,
-				      (Window)gtk_plug_get_id (GTK_PLUG (icon)),
-				      id, 0, 0);
-#endif
-}
-
-GtkOrientation
-egg_tray_icon_get_orientation (EggTrayIcon *icon)
-{
-  g_return_val_if_fail (EGG_IS_TRAY_ICON (icon), GTK_ORIENTATION_HORIZONTAL);
-
-  return icon->orientation;
-}
diff -urN stardict-3.0.2/src/eggtrayicon.h stardict-3.0.2.new/src/eggtrayicon.h
--- stardict-3.0.2/src/eggtrayicon.h	2010-10-05 16:28:16.000000000 +0800
+++ stardict-3.0.2.new/src/eggtrayicon.h	1970-01-01 08:00:00.000000000 +0800
@@ -1,80 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*- */
-/* eggtrayicon.h
- * Copyright (C) 2002 Anders Carlsson <andersca@gnu.org>
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2 of the License, or (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this library; if not, write to the
- * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
- * Boston, MA 02111-1307, USA.
- */
-
-#ifndef __EGG_TRAY_ICON_H__
-#define __EGG_TRAY_ICON_H__
-
-#include <gtk/gtkplug.h>
-#ifdef GDK_WINDOWING_X11
-#include <gdk/gdkx.h>
-#endif
-
-G_BEGIN_DECLS
-
-#define EGG_TYPE_TRAY_ICON		(egg_tray_icon_get_type ())
-#define EGG_TRAY_ICON(obj)		(G_TYPE_CHECK_INSTANCE_CAST ((obj), EGG_TYPE_TRAY_ICON, EggTrayIcon))
-#define EGG_TRAY_ICON_CLASS(klass)	(G_TYPE_CHECK_CLASS_CAST ((klass), EGG_TYPE_TRAY_ICON, EggTrayIconClass))
-#define EGG_IS_TRAY_ICON(obj)		(G_TYPE_CHECK_INSTANCE_TYPE ((obj), EGG_TYPE_TRAY_ICON))
-#define EGG_IS_TRAY_ICON_CLASS(klass)	(G_TYPE_CHECK_CLASS_TYPE ((klass), EGG_TYPE_TRAY_ICON))
-#define EGG_TRAY_ICON_GET_CLASS(obj)	(G_TYPE_INSTANCE_GET_CLASS ((obj), EGG_TYPE_TRAY_ICON, EggTrayIconClass))
-	
-typedef struct _EggTrayIcon	  EggTrayIcon;
-typedef struct _EggTrayIconClass  EggTrayIconClass;
-
-struct _EggTrayIcon
-{
-  GtkPlug parent_instance;
-
-  guint stamp;
-  
-#ifdef GDK_WINDOWING_X11
-  Atom selection_atom;
-  Atom manager_atom;
-  Atom system_tray_opcode_atom;
-  Atom orientation_atom;
-  Window manager_window;
-#endif
-  GtkOrientation orientation;
-};
-
-struct _EggTrayIconClass
-{
-  GtkPlugClass parent_class;
-};
-
-GType        egg_tray_icon_get_type       (void);
-
-EggTrayIcon *egg_tray_icon_new_for_screen (GdkScreen   *screen,
-					   const gchar *name);
-
-EggTrayIcon *egg_tray_icon_new            (const gchar *name);
-
-guint        egg_tray_icon_send_message   (EggTrayIcon *icon,
-					   gint         timeout,
-					   const char  *message,
-					   gint         len);
-void         egg_tray_icon_cancel_message (EggTrayIcon *icon,
-					   guint        id);
-
-GtkOrientation egg_tray_icon_get_orientation (EggTrayIcon *icon);
-					    
-G_END_DECLS
-
-#endif /* __EGG_TRAY_ICON_H__ */
diff -urN stardict-3.0.2/src/Makefile.am stardict-3.0.2.new/src/Makefile.am
--- stardict-3.0.2/src/Makefile.am	2010-12-09 00:34:22.000000000 +0800
+++ stardict-3.0.2.new/src/Makefile.am	2011-05-16 19:15:49.732539389 +0800
@@ -52,7 +52,7 @@
 
 if !DARWIN_SUPPORT
 KEYPRESS_FILE_MODULE = x11_iskeyspressed.cpp x11_iskeyspressed.hpp
-DOCKLET_FILE_MODULE = docklet.cpp docklet.h eggtrayicon.c eggtrayicon.h
+DOCKLET_FILE_MODULE = docklet.cpp docklet.h
 endif
 
 stardict_SOURCES = 			                \
diff -urN stardict-3.0.2/src/Makefile.in stardict-3.0.2.new/src/Makefile.in
--- stardict-3.0.2/src/Makefile.in	2011-01-12 00:04:10.000000000 +0800
+++ stardict-3.0.2.new/src/Makefile.in	2011-05-16 19:15:49.735872722 +0800
@@ -67,7 +67,7 @@
 	articleview.h class_factory.cpp class_factory.hpp \
 	config_file.hpp inifile.cpp inifile.hpp gconf_file.cpp \
 	gconf_file.hpp x11_iskeyspressed.cpp x11_iskeyspressed.hpp \
-	docklet.cpp docklet.h eggtrayicon.c eggtrayicon.h \
+	docklet.cpp docklet.h \
 	gtk_iskeyspressed.cpp gtk_iskeyspressed.hpp progresswin.cpp \
 	progresswin.hpp tray.cpp tray.hpp dictmanage.cpp dictmanage.h \
 	eggaccelerators.cpp eggaccelerators.h globalhotkeys.cpp \
@@ -83,8 +83,7 @@
 @GNOME_SUPPORT_FALSE@@MAEMO_SUPPORT_TRUE@	gconf_file.$(OBJEXT)
 @GNOME_SUPPORT_TRUE@am__objects_3 = gconf_file.$(OBJEXT)
 @DARWIN_SUPPORT_FALSE@am__objects_4 = x11_iskeyspressed.$(OBJEXT)
-@DARWIN_SUPPORT_FALSE@am__objects_5 = docklet.$(OBJEXT) \
-@DARWIN_SUPPORT_FALSE@	eggtrayicon.$(OBJEXT)
+@DARWIN_SUPPORT_FALSE@am__objects_5 = docklet.$(OBJEXT)
 am_stardict_OBJECTS = $(am__objects_1) $(am__objects_2) \
 	stardict.$(OBJEXT) mainwin.$(OBJEXT) conf.$(OBJEXT) \
 	skin.$(OBJEXT) prefsdlg.$(OBJEXT) dictmanagedlg.$(OBJEXT) \
@@ -410,7 +409,7 @@
 @GNOME_SUPPORT_TRUE@	stardict-application-server.cpp stardict-application-server.h
 
 @DARWIN_SUPPORT_FALSE@KEYPRESS_FILE_MODULE = x11_iskeyspressed.cpp x11_iskeyspressed.hpp
-@DARWIN_SUPPORT_FALSE@DOCKLET_FILE_MODULE = docklet.cpp docklet.h eggtrayicon.c eggtrayicon.h
+@DARWIN_SUPPORT_FALSE@DOCKLET_FILE_MODULE = docklet.cpp docklet.h
 stardict_SOURCES = \
 	$(IDL_SOURCES)			                \
 	$(STARIDCT_APP_SERVER)                  \
@@ -552,7 +551,6 @@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/dictmanagedlg.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/docklet.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eggaccelerators.Po@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eggtrayicon.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/floatwin.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gconf_file.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/globalhotkeys.Po@am__quote@
